<?xml version="1.0" encoding="UTF-8"?>
<project name="partkeepr" default="test-setup">
	<property file="build.properties"  />
	
    <target name="pre-commit">
    	<jsllint haltonfailure="true">
			<fileset dir="src/frontend">
				<include name="**/*.js"/>
			</fileset>
		</jsllint>
    </target>
    
    <!-- Cleans the output directories -->
    <target name="clean">
    	<delete dir="reports" />
    	<delete dir="frontend" />
    	<delete dir="data" />
    </target>
    
    <!--  Re-generates the proxies needed by Doctrine2 -->
    <target name="create-orm-proxies">
    	<exec command="doctrine orm:generate-proxies" passthru="true"/>
    </target>
	
	<target name="compile-theme">
	    	<exec dir="theme/sass" command="compass compile partkeepr.scss" passthru="true"/>
			<copy file="theme/css/partkeepr.css" tofile="frontend/css/partkeepr-theme.css"/>
			<copy file="theme/css/partkeepr.css" tofile="setup/css/partkeepr-theme.css"/>
		
			<copy todir="frontend/resources/themes/images/">
				<fileset dir="theme/themes/images/">
					<include name="**/*"/>
				</fileset>
			</copy>
		
			<copy todir="setup/resources/themes/images/">
				<fileset dir="theme/themes/images/">
					<include name="**/*"/>
				</fileset>
			</copy>
	</target>
    
        <target name="git-update-submodules">
            <exec command="git submodule update" checkreturn="true"/>
        </target>
	
	<target name="build-setup">
		<mkdir dir="setup/"/>
		<mkdir dir="setup/js/wizard"/>
		
		<copy overwrite="false" todir="setup/extjs/">
			<fileset dir="${extjs.path}">
				<include name="bootstrap.js"/>
				<include name="compatibility/ext3-core-compat.js"/>
				<include name="compatibility/ext3-compat.js"/>
				<include name="ext-all.js"/>
				<include name="ext-all-debug.js"/>
				<include name="ext-all-debug-w-comments.js"/>
				<include name="adapter/ext/ext-base.js"/>
				<include name="adapter/ext/ext-base-debug-w-comments.js"/>
				<include name="source/adapter/ext-base.js"/>
			</fileset>
		</copy>
		
		<copy overwrite="true" todir="setup/js/wizard">
			<fileset dir="3rdparty/ext-wizard/Ext.ux.Wizard">
				<include name="**"/>
			</fileset>
		</copy>
		
		<copy overwrite="true" todir="setup/">
			<fileset dir="src/setup">
				<include name="**"/>
			</fileset>
		</copy>
			
	</target>
	
	<target name="build-frontend">
		<echo>Copying 3rdparty/extjs - this may take up to a few minutes</echo>
				<mkdir dir="frontend/"/>
				<copy overwrite="false" todir="frontend/extjs/">
					<fileset dir="${extjs.path}">
						<include name="bootstrap.js"/>
						<include name="compatibility/ext3-core-compat.js"/>
						<include name="compatibility/ext3-compat.js"/>
						<include name="ext-all.js"/>
						<include name="ext-all-debug.js"/>
						<include name="ext-all-debug-w-comments.js"/>
						<include name="adapter/ext/ext-base.js"/>
						<include name="adapter/ext/ext-base-debug-w-comments.js"/>
						<include name="source/adapter/ext-base.js"/>
						<include name="resources/**"/>
					</fileset>
				</copy>
					
				<echo>Copying Ext Statusbar</echo>
				<copy overwrite="false" todir="frontend/js/Ext.ux/">
					<fileset dir="${extjs.path}/examples/ux">
						<include name="statusbar/**"/>
					</fileset>
				</copy>
				
				<echo>Copying Ext.tab.TabCloseMenu</echo>
				<copy overwrite="false" todir="frontend/js/Ext.ux/">
					<fileset dir="${extjs.path}/examples/ux">
						<include name="TabCloseMenu.js"/>
					</fileset>
				</copy>
				
				<echo>Copying phpjs</echo>
				<mkdir dir="frontend/js/org.phpjs.lib/"/>
				<copy overwrite="false" todir="frontend/js/org.phpjs.lib">
					<fileset dir="3rdparty/phpjs/">
						<include name="php.default.min.js"/>
					</fileset>
				</copy>
					
				<echo>Copying JS frontend</echo>
				<copy overwrite="true" todir="frontend/">
					<fileset dir="src/frontend">
						<include name="**"/>
					</fileset>
				</copy>
				
				<phingcall target="create-orm-proxies"/>
				
				<phingcall target="jsbuilder"/>
	</target>
	
    <!-- Builds the frontend, regenerates the proxies and minifies the JS -->
	<target name="build">
		<phingcall target="git-update-submodules"/>
		
		<phingcall target="build-frontend"/>
		<phingcall target="build-setup"/>
	</target>
    
    
    <target name="release">
    	<phingcall target="build"/>
    </target>
		
		
    <!-- Builds the jsb3 file and build the minified JS files -->
    <target name="jsbuilder">
    	<exec command="php util/gen-jsb3-file.php ./src/frontend/ ${extjs.path}"/>
    	<exec command="${extjs.path}/jsbuilder/JSBuilder.sh --projectFile ${project.basedir}/partkeepr.jsb3 --deployDir ${project.basedir}/frontend/js" passthru="true"/>
    </target>
    
	<!-- Checks all JavaScript files for common mistakes. Requires JSLint from http://www.javascriptlint.com -->
	<target name="jslint">
		<jsllint>
			<fileset dir="src/frontend">
				<include name="**/*.js"/>
			</fileset>
		</jsllint>
		<jsllint>
			<fileset dir="src/setup">
				<include name="**/*.js"/>
			</fileset>
		</jsllint>
	</target>
    
	<!-- Checks all PHP files for messy code. -->
	<target name="phpmd">
		<mkdir dir="reports/logs"/>
    	
		<phpmd rulesets="codesize,unusedcode,design,naming">
			<fileset dir="src/">
				<include name="**/*.php" />
			</fileset>
			<formatter type="xml" outfile="reports/logs/pmd.xml"/>
		</phpmd>
	</target>
    
	<!-- Checks all PHP files for copy/paste code -->
	<target name="phpcpd">
		<mkdir dir="reports/logs"/>
		<phpcpd minTokens="30">
			<fileset dir="src/">
				<include name="**/*.php" />
			</fileset>
			<formatter type="pmd" outfile="reports/logs/pmd-cpd.xml"/>
		</phpcpd>
	</target>
    
	<target name="code-coverage">
	  
		<mkdir dir="reports/coverage/db"/>
		<mkdir dir="reports/phpunit"/>
		
		<coverage-setup database="reports/coverage/db/coverage.db">
			<fileset dir="src">
				<include name="**/*.php"/>
			</fileset>
		</coverage-setup>
    	
		<phpunit bootstrap="tests/bootstrap.php" haltonfailure="false" codecoverage="true" printsummary="true">
			
			<batchtest>
				<fileset dir="tests/">
					<include name="**/*Test.php" />
				</fileset>
			</batchtest>
			<formatter todir="reports/phpunit/" type="xml"/>
			<formatter type="clover" usefile="true" todir="reports/coverage/"/>
			
		</phpunit>
		
		<phpunitreport infile="reports/phpunit/testsuites.xml" format="frames" todir="reports/phpunit"/>
		
		<coverage-report outfile="reports/coverage/db/coverage.xml">
			<report todir="reports/coverage/"/>
		</coverage-report>
	</target>
	
	<target name="php-documentor">
		<phpdoc title="API Documentation" destdir="reports/api/" undocumentedelements="true" sourcecode="true" output="HTML:Smarty:PHP">
			<fileset dir="src/">
				<include name="**/*.php" />
			</fileset>
			<projdocfileset dir=".">
				<include name="README" />
				<include name="INSTALL" />
				<include name="CHANGELOG" />
			</projdocfileset>
		</phpdoc>
	</target>

	<target name="test">
		<mkdir dir="reports/phpunit"/>
		
		<phpunit bootstrap="tests/bootstrap.php" haltonfailure="false" haltonerror="true" codecoverage="false" printsummary="true">
			<formatter todir="reports/phpunit/" type="xml"/>
			<batchtest>
				<fileset dir="tests/">
					<include name="**/*Test.php" />
				</fileset>
			</batchtest>
			<formatter type="plain" usefile="false" />
		</phpunit>
		
		<phpunitreport infile="reports/phpunit/testsuites.xml" format="frames" todir="reports/phpunit"/>
		
	</target>
	
	<target name="test-setup" >
		<echo msg="Testing the installation..." />
        
		<phpunit haltonfailure="true" codecoverage="false" printsummary="true">
			<batchtest>
				<fileset dir="setup/tests/">
					<include name="*Test.php" />
				</fileset>
			</batchtest>
			<formatter type="plain" usefile="false" />
		</phpunit>
		
		<echo msg=""/>
        
		<echo msg="       ***************************"/>
		<echo msg="       Setup Test Complete"/>
		<echo msg="       ***************************"/>
		<echo msg=""/>
		<echo msg="       No errors were found."/>
		<echo msg="       You may now proceed!"/>
	</target>
	
	<target name="cruise-control" depends="clean,phpmd,jslint,phpcpd,code-coverage,php-documentor">
			
	</target>
</project>
